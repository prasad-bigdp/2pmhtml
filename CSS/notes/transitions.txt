
CSS TRANSITIONS AND ANIMATIONS
============================

1. CSS TRANSITIONS
-----------------
Transition means transforming or moving from one state to another state smoothly.
Transitions allow you to define the transition between two states of an element.

Properties:
- transition-property: Specifies the CSS property to transition
- transition-duration: Duration of the transition
- transition-timing-function: Specifies the speed curve of the transition
- transition-delay: Delay before the transition starts
- transition: Shorthand property

Example:

.button {
    background-color: blue;
    transition: background-color 0.3s ease;
}

.button:hover {
    background-color: red;
}
```

2. CSS ANIMATIONS
----------------
Animations allow elements to change from one style to another using keyframes.

Properties:
- animation-name: Name of the @keyframes animation
- animation-duration: Duration of the animation
- animation-timing-function: Speed curve of the animation
- animation-delay: Delay before starting
- animation-iteration-count: Number of times to run
- animation-direction: Direction of animation
- animation-fill-mode: Styles before/after animation
- animation: Shorthand property

Example:

@keyframes bounce {
    0% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
    100% { transform: translateY(0); }
}

.bouncing-ball {
    animation: bounce 1s infinite;
}
```

3. PRACTICAL EXAMPLES
--------------------

a) Hover Effect with Transition:

.card {
    transform: scale(1);
    transition: transform 0.3s ease;
}

.card:hover {
    transform: scale(1.1);
}
```

b) Loading Spinner Animation:

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #f3f3f3;
    border-top: 5px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}
```

c) Fade-in Effect:

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.fade-in-element {
    animation: fadeIn 1s ease-in;
}
```

4. TIMING FUNCTIONS
------------------
Common timing functions:
- ease: Slow start, fast middle, slow end
- linear: Same speed throughout
- ease-in: Slow start
- ease-out: Slow end
- ease-in-out: Slow start and end
- cubic-bezier(): Custom timing function

5. BEST PRACTICES
----------------
1. Keep animations subtle and purposeful
2. Avoid animating expensive properties (layout/paint)
3. Use transform and opacity for better performance
4. Consider reduced motion preferences
5. Keep durations between 200ms and 500ms for best UX

6. PERFORMANCE TIPS
-----------------
- Use transform and opacity instead of position or dimensions
- Avoid animating many elements simultaneously
- Use will-change property for optimization
- Test on various devices and browsers

Example of performance-optimized animation:

.optimized-animation {
    transform: translateZ(0); /* Hardware acceleration */
    will-change: transform;
    transition: transform 0.3s ease;
}
```

Note: Always ensure animations enhance user experience rather than distract from it.
Remember to test accessibility and provide alternatives for users who prefer reduced motion:


@media (prefers-reduced-motion: reduce) {
    * {
        animation: none !important;
        transition: none !important;
    }
}
```